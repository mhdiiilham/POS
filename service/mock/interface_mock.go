// Code generated by MockGen. DO NOT EDIT.
// Source: service/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt"
	gomock "github.com/golang/mock/gomock"
)

// MockHasher is a mock of Hasher interface.
type MockHasher struct {
	ctrl     *gomock.Controller
	recorder *MockHasherMockRecorder
}

// MockHasherMockRecorder is the mock recorder for MockHasher.
type MockHasherMockRecorder struct {
	mock *MockHasher
}

// NewMockHasher creates a new mock instance.
func NewMockHasher(ctrl *gomock.Controller) *MockHasher {
	mock := &MockHasher{ctrl: ctrl}
	mock.recorder = &MockHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHasher) EXPECT() *MockHasherMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockHasher) ComparePassword(ctx context.Context, hashedPassword, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", ctx, hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockHasherMockRecorder) ComparePassword(ctx, hashedPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockHasher)(nil).ComparePassword), ctx, hashedPassword, password)
}

// HashPassword mocks base method.
func (m *MockHasher) HashPassword(ctx context.Context, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", ctx, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockHasherMockRecorder) HashPassword(ctx, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockHasher)(nil).HashPassword), ctx, password)
}

// MockTokenSigner is a mock of TokenSigner interface.
type MockTokenSigner struct {
	ctrl     *gomock.Controller
	recorder *MockTokenSignerMockRecorder
}

// MockTokenSignerMockRecorder is the mock recorder for MockTokenSigner.
type MockTokenSignerMockRecorder struct {
	mock *MockTokenSigner
}

// NewMockTokenSigner creates a new mock instance.
func NewMockTokenSigner(ctrl *gomock.Controller) *MockTokenSigner {
	mock := &MockTokenSigner{ctrl: ctrl}
	mock.recorder = &MockTokenSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenSigner) EXPECT() *MockTokenSignerMockRecorder {
	return m.recorder
}

// Extract mocks base method.
func (m *MockTokenSigner) Extract(ctx context.Context, signedToken string) (jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract", ctx, signedToken)
	ret0, _ := ret[0].(jwt.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extract indicates an expected call of Extract.
func (mr *MockTokenSignerMockRecorder) Extract(ctx, signedToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockTokenSigner)(nil).Extract), ctx, signedToken)
}

// Sign mocks base method.
func (m *MockTokenSigner) Sign(ctx context.Context, userID int, email string, merchantID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", ctx, userID, email, merchantID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockTokenSignerMockRecorder) Sign(ctx, userID, email, merchantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockTokenSigner)(nil).Sign), ctx, userID, email, merchantID)
}
